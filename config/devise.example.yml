defaults: &defaults
  # ==> Mailer Configuration
  # Configure the e-mail address which will be shown in Devise::Mailer,
  # note that it will be overwritten if you use your own mailer class with default "from" parameter.
  mailer_sender: "no-reply@example.com"

  # Configure the class responsible to send e-mails.
  mailer: "Devise::Mailer"

  # ==> Configuration for any authentication mechanism
  # Configure which keys are used when authenticating a user. The default is
  # just 'email'. You can re it to use 'username' and 'subdomain', so for
  # authenticating a user, both parameters are required. Remember that those
  # parameters are used only when authenticating and not when retrieving from
  # session. If you need permissions, you should implement that in a before filter.
  # You can also supply a hash where the value is a boolean determining whether
  # or not authentication should be aborted when the value is not present.
  authentication_keys:
    - 'email'

  # Configure which authentication keys should be case-insensitive.
  # These keys will be downcased upon creating or modifying a user and when used
  # to authenticate or find a user. Default is :email.
  case_insensitive_keys:
    - 'email'

  # Configure which authentication keys should have whitespace stripped.
  # These keys will have whitespace before and after removed upon creating or
  # modifying a user and when used to authenticate or find a user. Default is :email.
  strip_whitespace_keys:
    -'email'

  # Tell if authentication through request.params is enabled. True by default.
  params_authenticatable: true

  # Tell if authentication through HTTP Basic Auth is enabled. False by default.
  http_authenticatable: false

  # If http headers should be returned for AJAX requests. True by default.
  http_authenticatable_on_xhr: true

  # The realm used in Http Basic Authentication. "Application" by default.
  http_authentication_realm: "Application"

  # It will change confirmation, password recovery and other workflows
  # to behave the same regardless if the e-mail provided was right or wrong.
  # Does not affect registerable.
  paranoid: true
  #
  # ==> Configuration for :database_authenticatable
  # For bcrypt, this is the cost for hashing the password and defaults to 10. If
  # using other encryptors, it sets how many times you want the password re-encrypted.
  #
  # It is STRONGLY RECOMMENDED to not use a value less than 10.
  stretches: 10

  # Setup a pepper to generate the encrypted password. A random 256 character string.
  pepper: "qixaaWMAYAypK6n3NG05dGQGChhDLi2bLBbBJGHHnaL5Sn1Z2qw49SJG8JBqbfWqH0uJqtYnEPgfRCRakoxBESZqXYv918Avz6VSngC0cCMBrAj6AhYrOeySHwobnaUfLx8Rp8HYzWJAaVE2kyBAyy8gn1hW1oB0irOyGiciv4G2BamGfVa0nFZSwRxGKUyAu81KQi1veXi6Z5Fa4kICz1d2I4Ptcgzf17IjbzfP2gen3breFQcwAc4o7rcxIam1"

  # ==> Configuration for :confirmable
  # A period that the user is allowed to access the website even without
  # confirming his account. For instance, if set to 2.days, the user will be
  # able to access the website for two days without confirming his account,
  # access will be blocked just in the third day. Default is 0.days, meaning
  # the user cannot access the website without confirming his account.
  # Format for Ruby
  confirm_within: '2.days'

  # Defines which key will be used when confirming an account
  confirmation_keys:
    -'email'

  # ==> Configuration for :rememberable
  # The time the user will be remembered without asking for credentials again.
  remember_for: '2.weeks'

  # If true, a valid remember token can be re-used between multiple browsers.
  remember_across_browsers: true

  # If true, extends the user's remember period when remembered via cookie.
  extend_remember_period: false

  # If true, uses the password salt as remember token. This should be turned
  # to false if you are not using database authenticatable.
  use_salt_as_remember_token: true

  # ==> Configuration for :validatable
  # Range for password length. Default is 6..128.
  password_length:
    min: 6
    max: 128

  # Email regex used to validate email formats. It simply asserts that
  # an one (and only one) @ exists in the given string. This is mainly
  # to give user feedback and not to assert the e-mail validity.
  email_regexp: '\A[^@]+@[^@]+\z'

  # ==> Configuration for :timeoutable
  # The time you want to timeout the user session without activity. After this
  # time the user will be asked for credentials again. Default is 30 minutes.
  timeout_in: '30.minutes'

  # ==> Configuration for :lockable
  # Defines which strategy will be used to lock an account.
  # :failed_attempts: Locks an account after a number of failed attempts to sign in.
  # :none           : No lock strategy. You should handle locking by yourself.
  lock_strategy: 'failed_attempts'

  # Defines which key will be used when locking and unlocking an account
  unlock_keys: 
    -'email'

  # Defines which strategy will be used to unlock an account.
  # :email: Sends an unlock link to the user email
  # :time : Re-enables login after a certain amount of time (see :unlock_in below)
  # :both : Enables both strategies
  # :none : No unlock strategy. You should handle unlocking by yourself.
  unlock_strategy: 'both'

  # Number of authentication tries before locking an account if lock_strategy
  # is failed attempts.
  maximum_attempts: 10

  # Time interval to unlock the account if :time is enabled as unlock_strategy.
  unlock_in: '1.hour'

  # ==> Configuration for :recoverable
  #
  # Defines which key will be used when recovering the password for an account
  reset_password_keys: 
    -'email'

  # Time interval you can reset your password with a reset password key.
  # Don't put a too small interval or your users won't have the time to
  # change their passwords.
  reset_password_within: '2.hours'

  # ==> Configuration for :encryptable
  # Allow you to use another encryption algorithm besides bcrypt (default). You can use
  # sha1, sha512 or encryptors from others authentication tools as clearance_sha1,
  # authlogic_sha512 (then you should set stretches above to 20 for default behavior)
  # and restful_authentication_sha1 (then you should set stretches to 10, and copy
  # REST_AUTH_SITE_KEY to pepper)
  encryptor: 'bcrypt'

  # ==> Configuration for :token_authenticatable
  # Defines name of the authentication token params key
  token_authentication_key: 'auth_token'

  # If true, authentication through token does not store user in session and needs
  # to be supplied on each request. Useful if you are using the token as API token.
  stateless_token: false

  # ==> Scopes ration
  # Turn scoped views on. Before rendering "sessions/new", it will first check for
  # "users/sessions/new". It's turned off by default because it's slower if you
  # are using only default views.
  scoped_views: false

  # Configure the default scope given to Warden. By default it's the first
  # devise role declared in your routes (usually :user).
  default_scope: 'user'

  # Configure sign_out behavior.
  # Sign_out action can be scoped (i.e. /users/sign_out affects only :user scope).
  # The default is true, which means any logout action will sign out all active scopes.
  sign_out_all_scopes: true

  # ==> Navigation ration
  # Lists the formats that should be treated as navigational. Formats like
  # :html, should redirect to the sign in page when the user does not have
  # access, but formats like :xml or :json, should return 401.
  #
  # If you have any extra navigational formats, like :iphone or :mobile, you
  # should add them to the navigational formats lists.
  #
  # The "*/*" and "*/*" formats below is required to match Internet
  # Explorer requests.
  navigational_formats:
    -'"*/*"'
    -':"*/*"'
    -':html'

  # The default HTTP method used to sign out a resource. Default is delete.
  sign_out_via: 'delete'

development:
  <<: *defaults

test:
  <<: *defaults

production:
  <<: *defaults
